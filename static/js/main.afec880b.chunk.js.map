{"version":3,"sources":["ToDoListItem.js","App.js","serviceWorker.js","index.js"],"names":["ToDoListItem","this","props","title","description","className","Component","App","state","todoList","JSON","parse","localStorage","getItem","addTodo","item","callBack","setState","concat","setItem","stringify","removeTodo","filter","x","onSubmit","e","preventDefault","titleElement","target","elements","descriptionElement","value","id","placeholder","type","map","todo","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAqBeA,G,6KAjBD,IAAD,EAMDC,KAAKC,MAJLC,EAFC,EAEDA,MACAC,EAHC,EAGDA,YAEGF,EALF,uCAQL,OACI,uCAAKG,UAAU,gBAAmBH,GAC9B,yBAAKG,UAAU,sBAAsBF,GACrC,yBAAKE,UAAU,4BAA4BD,Q,GAZhCE,cC0FZC,E,4MAvFbC,MAAQ,CACNC,SAAUC,KAAKC,MAAMC,aAAaC,QAAQ,cAAgB,I,EAI5DC,QAAU,SAACC,EAAMC,GAEf,EAAKC,SACH,CACER,SAAU,EAAKD,MAAMC,SAASS,OAAOH,KAEvC,WAEEH,aAAaO,QAAQ,WAAYT,KAAKU,UAAU,EAAKZ,MAAMC,WAE3DO,GAAYA,Q,EAMlBK,WAAa,SAACN,EAAMC,GAClB,EAAKC,SACH,CACER,SAAU,EAAKD,MAAMC,SAASa,QAAO,SAAAC,GAAC,OAAIA,IAAMR,OAElD,WAEEH,aAAaO,QAAQ,WAAYT,KAAKU,UAAU,EAAKZ,MAAMC,WAE3DO,GAAYA,Q,uDAKR,IAAD,OACP,OACE,yBAAKX,UAAU,OACb,0BACEA,UAAU,WACVmB,SAAU,SAACC,GAETA,EAAEC,iBAEF,IAAMC,EAAeF,EAAEG,OAAOC,SAAT,MAEfC,EAAqBL,EAAEG,OAAOC,SAAT,YAE3B,EAAKf,QACH,CACEX,MAAOwB,EAAaI,MACpB3B,YAAa0B,EAAmBC,QAElC,WAEEJ,EAAaI,MAAQ,GACrBD,EAAmBC,MAAQ,QAKjC,yBAAK1B,UAAU,QACb,wCACA,2BAAO2B,GAAG,QAAQC,YAAY,6BAC9B,6BACA,8BAAUD,GAAG,cAAcC,YAAY,iBACvC,6BACA,4BAAQC,KAAK,UAAb,kBAGJ,6BAEGjC,KAAKO,MAAMC,SAAS0B,KAAI,SAACC,GAAD,OACvB,kBAAC,EAAD,CACEC,IAAKD,EAAKjC,MACVA,MAAOiC,EAAKjC,MACZC,YAAagC,EAAKhC,YAElBkC,QAAS,kBAAM,EAAKjB,WAAWe,e,GAhF3B9B,aCQEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.afec880b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './ToDoListItem.css';\r\n\r\nclass ToDoListItem extends Component {\r\n    render() {\r\n        const {\r\n            title,\r\n            description,\r\n            // JavaScriptの分割代入構文(...props)\r\n            ...props\r\n        } = this.props;\r\n\r\n        return(\r\n            <div className=\"ToDoListItem\" {...props}>\r\n                <div className=\"ToDoListItem-title\">{title}</div>\r\n                <div className=\"ToDoListItem-description\">{description}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ToDoListItem;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ToDoListItem from \"./ToDoListItem.js\";\n\nclass App extends Component {\n  // ToDoListをstateに定義、初期値はlocalStorageから取得または []\n  state = {\n    todoList: JSON.parse(localStorage.getItem(\"todoList\")) || [],\n  };\n\n  //todoList itemの追加\n  addTodo = (item, callBack) => {\n    //todoList stateに追加(todoListという配列にconcatでitemをつないでいる)\n    this.setState(\n      {\n        todoList: this.state.todoList.concat(item),\n      },\n      () => {\n        // localStorageにtodoList stateを保存(JSON.stringifyメソッドでJSON文字列に置き換えている)\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.todoList));\n        //callback関数が引数に渡されていた場合に実行\n        callBack && callBack();\n      }\n    );\n  };\n\n  // todoListからitemを削除\n  removeTodo = (item, callBack) => {\n    this.setState(\n      {\n        todoList: this.state.todoList.filter(x => x !== item),\n      },\n      () => {\n        // localStorageにtodoList stateを保存\n        localStorage.setItem(\"todoList\", JSON.stringify(this.state.todoList));\n        // callBack関数が引数に渡されていた場合に実行\n        callBack && callBack();\n      }\n    );\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <form\n          className=\"App-form\"\n          onSubmit={(e) => {\n            // formのデフォルトのイベントをキャンセル\n            e.preventDefault();\n            // idがtitleのElementを取得\n            const titleElement = e.target.elements[\"title\"];\n            // idがdescriptionのElementを取得\n            const descriptionElement = e.target.elements[\"description\"];\n\n            this.addTodo(\n              {\n                title: titleElement.value,\n                description: descriptionElement.value,\n              },\n              () => {\n                //stateの変更後に入力した値を空にする\n                titleElement.value = \"\";\n                descriptionElement.value = \"\";\n              }\n            );\n          }}\n        >\n          <div className=\"form\">\n            <h1>ToDoList</h1>\n            <input id=\"title\" placeholder=\"タイトル\" />\n            <br />\n            <textarea id=\"description\" placeholder=\"内容\" />\n            <br />\n            <button type=\"submit\">登録</button>\n          </div>\n        </form>\n        <div>\n          {/* todoList配列の要素数分ToDoListItemコンポーネントを展開 */}\n          {this.state.todoList.map((todo) => (\n            <ToDoListItem\n              key={todo.title}\n              title={todo.title}\n              description={todo.description}\n              //クリックされたItemをtodoListのstateから削除\n              onClick={() => this.removeTodo(todo)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}